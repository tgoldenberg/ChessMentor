.games-show-wrapper{data: {player1: "#{@game.player1_id}", player2: "#{@game.player2_id}", currentUser: "#{current_user.id}"}}
  .first-row
    .user-profiles.animated
      .player-profile{id: 'player1-profile'}
        .player-header
          %span.glyphicon.glyphicon-user
          %p #{@other_player.try(:name)}
          %span.glyphicon.glyphicon-minus
        %table.tables.player-content
          %tbody
            %tr
              %td.grey-highlight Ranking: #{@other_player.official_ranking}
            %tr
              %td.grey-highlight City: #{@other_player.city}
            %tr
              %td.grey-highlight Country #{@other_player.country}
        - if current_user == @game.player1
          .time-wrapper{id: 'time0'}
        - else
          .time-wrapper{id: 'time1'}
      %br/
      .player-profile.animated{id: 'player2-profile'}
        .player-header
          %span.glyphicon.glyphicon-user
          %p #{@current_user.name}
          %span.glyphicon.glyphicon-minus
        %table.tables.player-content
          %tbody
            %tr
              %td.grey-highlight Ranking: #{current_user.official_ranking}
            %tr
              %td.grey-highlight City: #{current_user.city}
            %tr
              %td.grey-highlight Country: #{current_user.country}
        - if current_user == @game.player1
          .time-wrapper{id: 'time1'}
        - else
          .time-wrapper{id: 'time0'}

    .board-wrapper{id: 'board'}


    .captured-pieces.animated
      .captured{id: 'captured-black'}
        .captured-header
          %span.glyphicon.glyphicon-tower
          %p Captured Black
          %span.glyphicon.glyphicon-minus
        .captured-holder{id: 'captured-pieces-black'}

      .captured{id: 'captured-white'}
        .captured-header
          %span.glyphicon.glyphicon-tower
          %p Captured White
          %span.glyphicon.glyphicon-minus
        .captured-holder{id: 'captured-pieces-white'}

    .notation-wrapper
      .notation-header
        %span.glyphicon.glyphicon-bishop
        %p Moves
        %span.glyphicon.glyphicon-minus
      .table-wrapper
        %table.tables.notation-holder
          - @moves.each_with_index do |move, idx|
            - if idx.even?
              %tr
                %td.grey-highlight
                  = link_to "#{move.notation}", new_board_path(move_id: move.id, fen: move.piece), remote: true


  .message-wrapper

= form_for [@game, @move], remote: true do |f|
  = f.hidden_field :notation, id: "move-notation"
  = f.hidden_field :piece, id: "move-piece"
  = f.hidden_field :game_id, value: @game.id
  = f.hidden_field :user_id, value: current_user.id
  = f.submit "", :id => 'move-submit', :style => 'display: none;'

.game-over.animated.bounceIn{style: 'display: none;'}
  %h1 Game Over: White Wins!
  %p Get ready for your aftergame debrief

.video-box{style: 'display:none;'}
  .video-screen{id: 'otherVideos'}
  .video-controls
    %button.button{id: 'camera'} Camera
    %button.button Audio

.video-box-self{id: 'myVideo', style: 'display:none;'}


%script{src: '/assets/lib/chess.js'}
%script{src: "https://cdn.cine.io/cineio-peer.js"}
%script{src: '/assets/chessboard.js'}
%script{src: '/assets/set_new_board.js'}
%script{src: '/assets/timer.js'}
%script{src: '/assets/video_init.js'}

-# %script{src: '/assets/modules/new_board.js'}

:javascript
  $(function() {
  // set timer
    updateStatus();

    var currentUser = $('.games-show-wrapper').data('currentuser');
    var player1 = $('.games-show-wrapper').data('player1');
    var player2 = $('.games-show-wrapper').data('player2');

    if (currentUser == player2) {
      board.orientation("black");
    }

    var pusher = new Pusher('f74ddd7f3eae987007b6');
    var channelName = 'private-conversation.' + $('.games-show-wrapper').data("currentuser");
    var channel = pusher.subscribe(channelName);
    // Pusher event for new chatbox message

    // Pusher event for new chess move
    channel.bind('new_move', function(data) {
      console.log(data);
      // onDrop(data.object_notation.split('-')[0], data.object_notation.split('-')[1]);
      var source = data.object_notation.split('-')[0]
      var target = data.object_notation.split('-')[1]
      onDrop(data.object_notation.split('-')[0], data.object_notation.split('-')[1]);
      board.move(data.object_notation);
      // castling rules
      if (data.object_notation == "e1-g1") {
        board.move("h1-f1");
      } else if (data.object_notation == "e1-c1") {
        board.move("a1-d1"); 
      } else if (data.object_notation == "e8-c8") {
        board.move("a8-d8");
      } else if (data.object_notation == "e8-g8") {
        board.move("h8-f8");
      }
      board.move({from: source, to: target})
      switchTurn();
    });

    channel.bind('rearrange_board', function(data) {
      console.log(data.fen);
      board.position(data.fen);
    });
    $('#time1').addClass('turn');
    return intervalId = setInterval(update, 1000);
    // assign Pusher key and channel name

  });
